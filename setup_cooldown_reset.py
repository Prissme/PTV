import asyncio
import asyncpg
import json
from dotenv import load_dotenv
import os

# Charger les variables d'environnement
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

async def setup_cooldown_reset_item():
    """Script pour ajouter l'item Reset Cooldowns au shop"""
    
    if not DATABASE_URL:
        print("‚ùå DATABASE_URL manquant dans le fichier .env")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = await asyncpg.connect(dsn=DATABASE_URL)
        print("‚úÖ Connect√© √† la base de donn√©es")
        
        # Donn√©es de l'item Reset Cooldowns
        item_data = {
            "name": "‚è∞ Reset Cooldowns",
            "description": "D√©sactive instantan√©ment TOUS tes cooldowns en cours ! (Daily, Vol, Give, etc.) - Usage imm√©diat √† l'achat",
            "price": 200,  # Prix de base (sans taxe)
            "type": "cooldown_reset",
            "data": json.dumps({
                "instant_use": True,
                "effect": "reset_all_cooldowns",
                "description": "Remet √† z√©ro tous les cooldowns du joueur imm√©diatement apr√®s l'achat"
            })
        }
        
        # V√©rifier si l'item existe d√©j√†
        existing = await conn.fetchrow("""
            SELECT id, name, price FROM shop_items 
            WHERE type = 'cooldown_reset' AND is_active = TRUE
        """)
        
        if existing:
            print(f"‚ö†Ô∏è Un item Reset Cooldowns existe d√©j√† :")
            print(f"   üìã ID: {existing['id']}")
            print(f"   üìù Nom: {existing['name']}")
            print(f"   üí∞ Prix: {existing['price']} PrissBucks")
            print()
            response = input("Voulez-vous le remplacer par la nouvelle version ? (o/N): ")
            if response.lower() != 'o':
                print("‚ùå Op√©ration annul√©e")
                await conn.close()
                return
            
            # D√©sactiver l'ancien item
            await conn.execute("""
                UPDATE shop_items SET is_active = FALSE 
                WHERE id = $1
            """, existing['id'])
            print(f"‚úÖ Ancien item d√©sactiv√© (ID: {existing['id']})")
        
        # Ajouter le nouvel item
        item_id = await conn.fetchval("""
            INSERT INTO shop_items (name, description, price, type, data, is_active)
            VALUES ($1, $2, $3, $4, $5, TRUE)
            RETURNING id
        """, 
        item_data["name"], 
        item_data["description"], 
        item_data["price"], 
        item_data["type"], 
        item_data["data"])
        
        print(f"‚úÖ Item 'Reset Cooldowns' ajout√© avec succ√®s !")
        print(f"   üìã ID: {item_id}")
        print(f"   üí∞ Prix: {item_data['price']} PrissBucks (base, sans taxe)")
        print(f"   üèõÔ∏è Prix avec taxe 5%: {item_data['price'] + int(item_data['price'] * 0.05)} PrissBucks")
        print(f"   üéØ Type: {item_data['type']}")
        print(f"   üìù Description: {item_data['description']}")
        print()
        print("üéÆ **Comment l'item fonctionne :**")
        print("   ‚Ä¢ L'utilisateur ach√®te l'item avec `/buy` ou `e!buy`")
        print("   ‚Ä¢ L'effet se d√©clenche automatiquement apr√®s l'achat")
        print("   ‚Ä¢ Tous les cooldowns (daily, vol, give, etc.) sont supprim√©s")
        print("   ‚Ä¢ L'utilisateur peut imm√©diatement utiliser toutes ses commandes")
        print()
        print("üìä **Statistiques pr√©vues :**")
        print("   ‚Ä¢ Prix attractif pour un effet puissant")
        print("   ‚Ä¢ Usage unique par achat (consommable)")
        print("   ‚Ä¢ Visible dans l'inventaire comme 'item consommable utilis√©'")
        
        await conn.close()
        print("üîå Connexion ferm√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

async def verify_item_setup():
    """V√©rifie que l'item a √©t√© correctement ajout√©"""
    try:
        conn = await asyncpg.connect(dsn=DATABASE_URL)
        
        # R√©cup√©rer tous les items cooldown_reset actifs
        items = await conn.fetch("""
            SELECT id, name, description, price, type, data, created_at 
            FROM shop_items 
            WHERE type = 'cooldown_reset' AND is_active = TRUE
            ORDER BY created_at DESC
        """)
        
        print("\nüîç **V√©rification des items Reset Cooldowns :**")
        if not items:
            print("‚ùå Aucun item Reset Cooldowns trouv√©")
        else:
            for item in items:
                print(f"   ‚úÖ ID: {item['id']} | Nom: {item['name']}")
                print(f"      üí∞ Prix: {item['price']} PB | Date: {item['created_at'].strftime('%d/%m/%Y %H:%M')}")
                
                # V√©rifier les donn√©es JSON
                try:
                    data = json.loads(item['data']) if item['data'] else {}
                    print(f"      üìä Donn√©es: {data}")
                except json.JSONDecodeError:
                    print(f"      ‚ö†Ô∏è Donn√©es JSON invalides: {item['data']}")
                print()
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

async def main():
    """Fonction principale"""
    print("üõçÔ∏è **Setup Item Reset Cooldowns**")
    print("=" * 50)
    
    # 1. Ajouter l'item
    await setup_cooldown_reset_item()
    
    # 2. V√©rifier que √ßa a march√©
    await verify_item_setup()
    
    print("=" * 50)
    print("üéâ **Setup termin√© !**")
    print()
    print("üìã **Prochaines √©tapes :**")
    print("1. Lance ton bot")
    print("2. Utilise `/shop` pour voir l'item")
    print("3. Teste l'achat avec `/buy <id>`")
    print("4. V√©rifie que les cooldowns sont supprim√©s avec `e!cooldowns`")

if __name__ == "__main__":
    asyncio.run(main())