"""
Bot √âconomie - Point d'entr√©e principal simplifi√©
Version all√©g√©e sans les syst√®mes complexes
"""

import discord
from discord.ext import commands
import asyncio
import logging
import sys
import signal
from pathlib import Path
from typing import Optional, List

# Imports locaux
from config import TOKEN, PREFIX, DATABASE_URL, LOG_LEVEL, HEALTH_PORT
from database.db import Database

# Configuration simple du logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper(), logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)


class BotManager:
    """Gestionnaire principal du bot - version simplifi√©e"""
    
    def __init__(self):
        self.bot: Optional[commands.Bot] = None
        self.database: Optional[Database] = None
        self.services: List[asyncio.Task] = []
        self.shutdown_requested = False
        
        # Configurer les gestionnaires d'arr√™t
        self._setup_shutdown_handlers()
    
    def _setup_shutdown_handlers(self):
        """Configure les gestionnaires d'arr√™t propre"""
        if sys.platform != "win32":
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire simple pour arr√™t gracieux"""
        logger.info(f"Signal {signum} re√ßu, arr√™t demand√©")
        self.shutdown_requested = True
    
    def create_bot(self) -> commands.Bot:
        """Cr√©e et configure le bot Discord"""
        intents = discord.Intents.default()
        intents.message_content = True
        intents.guilds = True
        intents.guild_messages = True
        
        bot = commands.Bot(
            command_prefix=PREFIX,
            intents=intents,
            help_command=None
        )
        
        # √âv√©nements essentiels seulement
        self._setup_bot_events(bot)
        
        return bot
    
    def _setup_bot_events(self, bot: commands.Bot):
        """Configure les √©v√©nements essentiels du bot"""
        
        @bot.event
        async def on_ready():
            logger.info(f"‚úÖ {bot.user} connect√© sur {len(bot.guilds)} serveur(s)")
            await self._sync_slash_commands(bot)
        
        @bot.event
        async def on_command_error(ctx, error):
            await ErrorHandler.handle_command_error(ctx, error)
        
        @bot.event
        async def on_application_command_error(interaction, error):
            await ErrorHandler.handle_slash_error(interaction, error)
    
    async def _sync_slash_commands(self, bot: commands.Bot):
        """Synchronise les slash commands"""
        try:
            synced = await bot.tree.sync()
            logger.info(f"üîÑ {len(synced)} slash command(s) synchronis√©e(s)")
        except Exception as e:
            logger.error(f"‚ùå Erreur sync slash commands: {e}")
    
    async def setup_database(self) -> bool:
        """Configure la base de donn√©es"""
        try:
            logger.info("üîå Connexion √† la base de donn√©es...")
            self.database = Database(dsn=DATABASE_URL)
            await self.database.connect()
            logger.info("‚úÖ Base de donn√©es connect√©e")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion DB: {e}")
            return False
    
    async def load_extensions(self, bot: commands.Bot) -> tuple[int, int]:
        """Charge les extensions simplifi√©es"""
        cogs_dir = Path("cogs")
        if not cogs_dir.exists():
            logger.warning("üìÅ Dossier 'cogs' manquant")
            return 0, 0
        
        # Extensions essentielles seulement
        essential_extensions = [
            'transaction_logs',  # Doit √™tre charg√© en premier
            'economy',
            'shop', 
            'leaderboard',
            'games',
            'roulette',
            'public_bank',
            'bank',  # Banque priv√©e conserv√©e
            'steal',
            'help'
        ]
        
        loaded = failed = 0
        
        for ext_name in essential_extensions:
            if await self._load_extension(bot, ext_name):
                loaded += 1
            else:
                failed += 1
        
        # Configurer les logs apr√®s chargement de transaction_logs
        self._setup_transaction_logging(bot)
        
        logger.info(f"üìä Extensions simplifi√©es: {loaded} charg√©es, {failed} √©checs")
        return loaded, failed
    
    async def _load_extension(self, bot: commands.Bot, ext_name: str) -> bool:
        """Charge une extension avec gestion d'erreurs"""
        try:
            await bot.load_extension(f'cogs.{ext_name}')
            logger.debug(f"‚úÖ Extension '{ext_name}' charg√©e")
            return True
        except Exception as e:
            logger.error(f"‚ùå √âchec chargement '{ext_name}': {e}")
            return False
    
    def _setup_transaction_logging(self, bot: commands.Bot):
        """Configure le syst√®me de logs de transactions"""
        transaction_logs_cog = bot.get_cog('TransactionLogs')
        if transaction_logs_cog:
            bot.transaction_logs = transaction_logs_cog
            logger.info("‚úÖ Logs de transactions configur√©s")
    
    def add_owner_commands(self, bot: commands.Bot):
        """Ajoute les commandes owner essentielles"""
        
        @bot.command(name='reload')
        @commands.is_owner()
        async def reload_cog(ctx, cog_name: str):
            try:
                await bot.reload_extension(f'cogs.{cog_name}')
                if cog_name == 'transaction_logs':
                    self._setup_transaction_logging(bot)
                await ctx.send(f"‚úÖ **'{cog_name}' recharg√©**")
            except Exception as e:
                await ctx.send(f"‚ùå **Erreur:** {e}")
        
        @bot.command(name='sync')
        @commands.is_owner()
        async def sync_commands(ctx):
            try:
                synced = await bot.tree.sync()
                await ctx.send(f"‚úÖ **{len(synced)} commande(s) synchronis√©e(s)**")
            except Exception as e:
                await ctx.send(f"‚ùå **Erreur sync:** {e}")
        
        @bot.command(name='status')
        @commands.is_owner()
        async def bot_status(ctx):
            embed = discord.Embed(title="ü§ñ Statut Bot", color=0x0099ff)
            embed.add_field(name="üü¢ √âtat", value="En ligne", inline=True)
            embed.add_field(name="üìä Serveurs", value=len(bot.guilds), inline=True)
            embed.add_field(name="üîß Extensions", value=len(bot.extensions), inline=True)
            embed.add_field(name="üíæ DB", value="üü¢ OK" if self.database else "üî¥ KO", inline=True)
            await ctx.send(embed=embed)
    
    async def run(self) -> None:
        """Point d'entr√©e principal - logique simplifi√©e"""
        try:
            # Validations pr√©alables
            self._validate_configuration()
            
            # Configuration de la base de donn√©es
            if not await self.setup_database():
                raise RuntimeError("Impossible de connecter la base de donn√©es")
            
            # Cr√©ation et configuration du bot
            self.bot = self.create_bot()
            self.bot.database = self.database
            
            # Chargement des extensions essentielles
            loaded, failed = await self.load_extensions(self.bot)
            if loaded == 0:
                logger.warning("‚ö†Ô∏è Aucune extension charg√©e")
            
            # Commandes owner
            self.add_owner_commands(self.bot)
            
            # D√©marrage du bot
            logger.info("üöÄ D√©marrage du bot simplifi√©...")
            bot_task = asyncio.create_task(self.bot.start(TOKEN))
            self.services.append(bot_task)
            
            # Boucle principale simplifi√©e
            await self._main_loop()
            
        except KeyboardInterrupt:
            logger.info("üëã Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"üí• Erreur critique: {e}")
            raise
        finally:
            await self._cleanup()
    
    def _validate_configuration(self):
        """Valide la configuration avant d√©marrage"""
        if not TOKEN:
            raise ValueError("TOKEN Discord manquant")
        if not DATABASE_URL:
            raise ValueError("URL de base de donn√©es manquante")
    
    async def _main_loop(self):
        """Boucle principale simplifi√©e"""
        while not self.shutdown_requested:
            try:
                # V√©rifier les services
                done_services = [s for s in self.services if s.done()]
                if done_services:
                    break
                
                await asyncio.sleep(1)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Erreur boucle principale: {e}")
                break
    
    async def _cleanup(self):
        """Nettoyage des ressources"""
        logger.info("üßπ Nettoyage en cours...")
        
        # Arr√™ter les services
        for service in self.services:
            if not service.done():
                service.cancel()
                try:
                    await service
                except asyncio.CancelledError:
                    pass
        
        # Fermer la base de donn√©es
        if self.database:
            await self.database.close()
        
        # Fermer le bot
        if self.bot and not self.bot.is_closed():
            await self.bot.close()
        
        logger.info("‚úÖ Nettoyage termin√©")


class ErrorHandler:
    """Gestionnaire d'erreurs centralis√© et simplifi√©"""
    
    ERROR_MESSAGES = {
        commands.CommandNotFound: None,  # Ignorer
        commands.MissingRequiredArgument: "‚ùå **Argument manquant**",
        commands.BadArgument: "‚ùå **Argument invalide**",
        commands.MissingPermissions: "‚ùå **Permissions insuffisantes**",
        commands.NotOwner: "‚ùå **Commande r√©serv√©e au propri√©taire**",
    }
    
    @classmethod
    async def handle_command_error(cls, ctx, error):
        """Gestion simplifi√©e des erreurs de commandes"""
        # V√©rifier si la commande a son propre gestionnaire
        if hasattr(ctx.command, 'has_error_handler') and ctx.command.has_error_handler():
            return
        
        error_type = type(error)
        
        # Cooldown avec temps format√©
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(f"‚è∞ **Cooldown** - R√©essaye dans {error.retry_after:.1f}s")
            return
        
        # Permissions bot
        if isinstance(error, commands.BotMissingPermissions):
            perms = ', '.join(error.missing_permissions)
            await ctx.send(f"‚ùå **Bot sans permissions:** {perms}")
            return
        
        # Messages d'erreur standard
        message = cls.ERROR_MESSAGES.get(error_type)
        if message:
            await ctx.send(message)
        elif error_type != commands.CommandNotFound:
            logger.error(f"Erreur non g√©r√©e {ctx.command}: {error}")
            await ctx.send("‚ùå **Erreur inattendue**")
    
    @classmethod
    async def handle_slash_error(cls, interaction, error):
        """Gestion simplifi√©e des erreurs slash"""
        error_messages = {
            discord.app_commands.CommandOnCooldown: 
                f"‚è∞ **Cooldown** - R√©essaye dans {error.retry_after:.1f}s",
            discord.app_commands.MissingPermissions: 
                "‚ùå **Permissions insuffisantes**",
        }
        
        message = error_messages.get(type(error), "‚ùå **Erreur inattendue**")
        
        embed = discord.Embed(
            description=message,
            color=0xff0000
        )
        
        try:
            if interaction.response.is_done():
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception:
            logger.error(f"Erreur envoi message d'erreur: {error}")


async def main():
    """Point d'entr√©e principal simplifi√©"""
    # Configuration Windows si n√©cessaire
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # Lancement du gestionnaire de bot
    manager = BotManager()
    await manager.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Au revoir !")
    except Exception as e:
        print(f"üí• Erreur critique: {e}")
        sys.exit(1)
