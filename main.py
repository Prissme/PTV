import discord
from discord.ext import commands
import asyncio
import logging
import os
import signal
import sys
import json
import asyncpg
from pathlib import Path

# Imports locaux
from config import TOKEN, PREFIX, DATABASE_URL, LOG_LEVEL, HEALTH_PORT
from database.db import Database

# Import du serveur de sant√©
try:
    from health_server import HealthServer
    HEALTH_SERVER_AVAILABLE = True
except ImportError:
    HEALTH_SERVER_AVAILABLE = False
    logging.warning("‚ö†Ô∏è health_server.py non trouv√©, pas de health check")

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration des intents
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.guild_messages = True

# Initialisation du bot
bot = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)

# Base de donn√©es globale
database = None

# Flag pour arr√™t propre
shutdown_flag = False

def signal_handler(signum, frame):
    """Gestionnaire pour arr√™t propre"""
    global shutdown_flag
    logger.info(f"Signal {signum} re√ßu, arr√™t en cours...")
    shutdown_flag = True

# Installer les gestionnaires de signaux (sauf sur Windows)
if sys.platform != "win32":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

# ==================== BOT EVENTS ====================

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot est pr√™t"""
    logger.info(f"‚úÖ {bot.user} est connect√© et pr√™t !")
    logger.info(f"üìä Connect√© √† {len(bot.guilds)} serveur(s)")
    
    # Synchroniser les slash commands
    try:
        synced = await bot.tree.sync()
        logger.info(f"üîÑ {len(synced)} slash command(s) synchronis√©e(s)")
    except Exception as e:
        logger.error(f"‚ùå Erreur sync slash commands: {e}")

@bot.event
async def on_command_error(ctx, error):
    """Gestion globale des erreurs de commandes"""
    # Ignorer les erreurs d√©j√† g√©r√©es par les cogs
    if hasattr(ctx.command, 'has_error_handler') and ctx.command.has_error_handler():
        return
    
    if isinstance(error, commands.CommandNotFound):
        return  # Ignorer les commandes inexistantes
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå **Argument manquant !**\nUtilise `{PREFIX}help` pour voir l'aide.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ùå **Argument invalide !**\nUtilise `{PREFIX}help` pour voir l'aide.")
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(f"‚è∞ **Cooldown !** R√©essaye dans {error.retry_after:.1f} secondes.")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå **Tu n'as pas les permissions n√©cessaires !**")
    elif isinstance(error, commands.BotMissingPermissions):
        missing_perms = ", ".join(error.missing_permissions)
        await ctx.send(f"‚ùå **Le bot n'a pas les permissions n√©cessaires :** {missing_perms}")
    elif isinstance(error, commands.NotOwner):
        await ctx.send("‚ùå **Seul le propri√©taire du bot peut utiliser cette commande !**")
    else:
        logger.error(f"Erreur non g√©r√©e dans {ctx.command}: {error}")
        await ctx.send("‚ùå **Une erreur inattendue s'est produite.**")

@bot.event
async def on_application_command_error(interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
    """Gestion globale des erreurs des slash commands"""
    if isinstance(error, discord.app_commands.CommandOnCooldown):
        embed = discord.Embed(
            title="‚è∞ Cooldown actif !",
            description=f"Tu pourras utiliser cette commande dans **{error.retry_after:.1f}** secondes.",
            color=0xff9900
        )
        try:
            if interaction.response.is_done():
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass
    elif isinstance(error, discord.app_commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Permissions insuffisantes",
            description="Tu n'as pas les permissions n√©cessaires pour utiliser cette commande.",
            color=0xff0000
        )
        try:
            if interaction.response.is_done():
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass
    else:
        logger.error(f"Erreur slash command non g√©r√©e: {error}")
        embed = discord.Embed(
            title="‚ùå Erreur",
            description="Une erreur inattendue s'est produite.",
            color=0xff0000
        )
        try:
            if interaction.response.is_done():
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(embed=embed, ephemeral=True)
        except:
            pass

@bot.event
async def on_guild_join(guild):
    """√âv√©nement quand le bot rejoint un serveur"""
    logger.info(f"‚úÖ Bot ajout√© au serveur: {guild.name} ({guild.id}) - {guild.member_count} membres")

@bot.event
async def on_guild_remove(guild):
    """√âv√©nement quand le bot quitte un serveur"""
    logger.info(f"‚ùå Bot retir√© du serveur: {guild.name} ({guild.id})")

async def setup_database():
    """Connecte la base de donn√©es et l'attache au bot"""
    global database
    try:
        database = Database(dsn=DATABASE_URL)
        await database.connect()
        bot.database = database  # Rendre la DB accessible aux cogs
        logger.info("‚úÖ Base de donn√©es connect√©e avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

async def setup_transaction_logs():
    """Configure le syst√®me de logs de transactions"""
    transaction_logs_cog = bot.get_cog('TransactionLogs')
    if transaction_logs_cog:
        # Rendre le syst√®me de logs accessible √† tous les cogs
        bot.transaction_logs = transaction_logs_cog
        logger.info("‚úÖ Syst√®me de logs de transactions configur√©")
    else:
        logger.warning("‚ö†Ô∏è Cog TransactionLogs non trouv√©")

async def load_cogs():
    """Charge automatiquement tous les cogs dans l'ordre correct"""
    cogs_dir = Path("cogs")
    cogs_loaded = 0
    cogs_failed = 0
    
    if not cogs_dir.exists():
        logger.warning("üìÅ Dossier 'cogs' introuvable, cr√©ation...")
        cogs_dir.mkdir()
        return
    
    # Charger d'abord TransactionLogs en priorit√©
    priority_cogs = ['transaction_logs']
    
    for cog_name in priority_cogs:
        try:
            await bot.load_extension(f'cogs.{cog_name}')
            logger.info(f"‚úÖ Cog prioritaire '{cog_name}' charg√© avec succ√®s")
            cogs_loaded += 1
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement du cog prioritaire '{cog_name}': {e}")
            cogs_failed += 1
    
    # Configurer le syst√®me de logs apr√®s le chargement de TransactionLogs
    await setup_transaction_logs()
    
    # Lister tous les autres fichiers .py dans le dossier cogs
    cog_files = [f.stem for f in cogs_dir.glob("*.py") if f.stem != "__init__" and f.stem not in priority_cogs]
    
    if not cog_files:
        logger.warning("‚ö†Ô∏è Aucun autre cog trouv√© dans le dossier 'cogs'")
        return
    
    logger.info(f"üîÑ Chargement de {len(cog_files)} cog(s) suppl√©mentaires...")
    
    for cog_name in cog_files:
        try:
            await bot.load_extension(f'cogs.{cog_name}')
            logger.info(f"‚úÖ Cog '{cog_name}' charg√© avec succ√®s")
            cogs_loaded += 1
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement du cog '{cog_name}': {e}")
            cogs_failed += 1
    
    logger.info(f"üìä R√©sultat: {cogs_loaded} cog(s) charg√©(s), {cogs_failed} √©chec(s)")

# Commandes de gestion des cogs (pour l'owner)
@bot.command(name='reload')
@commands.is_owner()
async def reload_cog(ctx, cog_name: str):
    """[OWNER] Recharge un cog"""
    try:
        await bot.reload_extension(f'cogs.{cog_name}')
        
        # Reconfigurer les logs si TransactionLogs a √©t√© recharg√©
        if cog_name == 'transaction_logs':
            await setup_transaction_logs()
        
        await ctx.send(f"‚úÖ **Cog '{cog_name}' recharg√© avec succ√®s !**")
        logger.info(f"üîÑ Cog '{cog_name}' recharg√© par {ctx.author}")
        
        # Re-synchroniser les slash commands apr√®s reload
        try:
            synced = await bot.tree.sync()
            logger.info(f"üîÑ {len(synced)} slash command(s) re-synchronis√©e(s)")
        except Exception as e:
            logger.error(f"Erreur re-sync apr√®s reload: {e}")
            
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors du rechargement de '{cog_name}': {e}**")
        logger.error(f"Erreur reload {cog_name}: {e}")

@bot.command(name='load')
@commands.is_owner()
async def load_cog(ctx, cog_name: str):
    """[OWNER] Charge un cog"""
    try:
        await bot.load_extension(f'cogs.{cog_name}')
        
        # Reconfigurer les logs si TransactionLogs a √©t√© charg√©
        if cog_name == 'transaction_logs':
            await setup_transaction_logs()
        
        await ctx.send(f"‚úÖ **Cog '{cog_name}' charg√© avec succ√®s !**")
        logger.info(f"‚ûï Cog '{cog_name}' charg√© par {ctx.author}")
        
        # Re-synchroniser les slash commands apr√®s load
        try:
            synced = await bot.tree.sync()
            logger.info(f"üîÑ {len(synced)} slash command(s) re-synchronis√©e(s)")
        except Exception as e:
            logger.error(f"Erreur re-sync apr√®s load: {e}")
            
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors du chargement de '{cog_name}': {e}**")
        logger.error(f"Erreur load {cog_name}: {e}")

@bot.command(name='unload')
@commands.is_owner()
async def unload_cog(ctx, cog_name: str):
    """[OWNER] D√©charge un cog"""
    if cog_name.lower() in ['economy', 'help', 'transaction_logs']:
        await ctx.send(f"‚ùå **Le cog '{cog_name}' ne peut pas √™tre d√©charg√© (cog critique).**")
        return
    
    try:
        await bot.unload_extension(f'cogs.{cog_name}')
        await ctx.send(f"‚úÖ **Cog '{cog_name}' d√©charg√© avec succ√®s !**")
        logger.info(f"‚ûñ Cog '{cog_name}' d√©charg√© par {ctx.author}")
        
        # Re-synchroniser les slash commands apr√®s unload
        try:
            synced = await bot.tree.sync()
            logger.info(f"üîÑ {len(synced)} slash command(s) re-synchronis√©e(s)")
        except Exception as e:
            logger.error(f"Erreur re-sync apr√®s unload: {e}")
            
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors du d√©chargement de '{cog_name}': {e}**")
        logger.error(f"Erreur unload {cog_name}: {e}")

@bot.command(name='cogs')
@commands.is_owner()
async def list_cogs(ctx):
    """[OWNER] Liste les cogs charg√©s"""
    loaded_cogs = [name.split('.')[-1] for name in bot.extensions.keys()]
    
    embed = discord.Embed(
        title="üîß Cogs Charg√©s",
        description=f"**{len(loaded_cogs)}** cog(s) actuellement charg√©(s)",
        color=0x0099ff
    )
    
    if loaded_cogs:
        cogs_list = "\n".join([f"‚úÖ `{cog}`" for cog in sorted(loaded_cogs)])
        embed.add_field(name="Cogs Actifs", value=cogs_list, inline=False)
    else:
        embed.add_field(name="Aucun Cog", value="Aucun cog charg√©", inline=False)
    
    # Afficher le nombre de slash commands
    slash_count = len(bot.tree.get_commands())
    embed.add_field(name="Slash Commands", value=f"`{slash_count}` commande(s) slash", inline=True)
    
    # Statut de la base de donn√©es
    db_status = "üü¢ Connect√©e" if database and database.pool else "üî¥ D√©connect√©e"
    embed.add_field(name="Base de donn√©es", value=db_status, inline=True)
    
    # Statut des logs de transactions
    logs_status = "üü¢ Actif" if hasattr(bot, 'transaction_logs') else "üî¥ Inactif"
    embed.add_field(name="Logs Transactions", value=logs_status, inline=True)
    
    embed.set_footer(text=f"Utilisez {PREFIX}reload <cog> pour recharger")
    await ctx.send(embed=embed)

@bot.command(name='sync')
@commands.is_owner()
async def sync_slash_commands(ctx):
    """[OWNER] Force la synchronisation des slash commands"""
    try:
        synced = await bot.tree.sync()
        await ctx.send(f"‚úÖ **{len(synced)} slash command(s) synchronis√©e(s) !**")
        logger.info(f"üîÑ Sync manuelle: {len(synced)} slash command(s)")
    except Exception as e:
        await ctx.send(f"‚ùå **Erreur lors de la synchronisation: {e}**")
        logger.error(f"Erreur sync manuelle: {e}")

async def cleanup():
    """Nettoyage propre des ressources"""
    global database
    
    logger.info("üßπ Nettoyage en cours...")
    
    # Fermer la base de donn√©es
    if database and database.pool:
        try:
            await database.close()
            logger.info("üîå Connexion √† la base ferm√©e")
        except Exception as e:
            logger.error(f"Erreur fermeture DB: {e}")
    
    # Fermer le bot
    if not bot.is_closed():
        try:
            await bot.close()
            logger.info("ü§ñ Bot ferm√©")
        except Exception as e:
            logger.error(f"Erreur fermeture bot: {e}")

async def main():
    """Fonction principale pour d√©marrer le bot"""
    global shutdown_flag
    
    try:
        # 1. D'ABORD connecter la base de donn√©es
        logger.info("üîå Connexion √† la base de donn√©es...")
        if not await setup_database():
            logger.error("üí• Impossible de se connecter √† la base de donn√©es, arr√™t.")
            return
        
        # 2. ENSUITE charger les cogs (maintenant que bot.database existe)
        logger.info("üì¶ Chargement des cogs...")
        await load_cogs()
        
        # 3. ENFIN d√©marrer le bot
        logger.info("üöÄ D√©marrage du bot Discord...")
        
        # D√©marrer le bot en arri√®re-plan
        bot_task = asyncio.create_task(bot.start(TOKEN))
        
        # Boucle de v√©rification du flag d'arr√™t
        while not shutdown_flag and not bot.is_closed():
            await asyncio.sleep(1)
        
        # Arr√™t demand√©
        if not bot.is_closed():
            logger.info("üõë Arr√™t du bot...")
            bot_task.cancel()
            
        try:
            await bot_task
        except asyncio.CancelledError:
            pass
        
    except KeyboardInterrupt:
        logger.info("üëã Arr√™t du bot demand√© par l'utilisateur")
        shutdown_flag = True
    except Exception as e:
        logger.error(f"üí• Erreur fatale: {e}")
        raise
    finally:
        await cleanup()

async def run_with_health_server():
    """Lance le bot avec le serveur de sant√©"""
    global shutdown_flag
    
    tasks = []
    
    # T√¢che principale du bot
    bot_task = asyncio.create_task(main())
    tasks.append(bot_task)
    
    # Serveur de sant√© si disponible
    if HEALTH_SERVER_AVAILABLE:
        health_server = HealthServer(port=HEALTH_PORT)
        health_task = asyncio.create_task(health_server.run_forever())
        tasks.append(health_task)
        logger.info("üè• Serveur de sant√© configur√©")
    
    try:
        # Attendre que l'une des t√¢ches se termine ou que l'arr√™t soit demand√©
        while not shutdown_flag:
            done, pending = await asyncio.wait(tasks, timeout=1.0, return_when=asyncio.FIRST_COMPLETED)
            
            if done:
                # Une t√¢che s'est termin√©e
                break
        
        # Annuler toutes les t√¢ches restantes
        for task in tasks:
            if not task.done():
                task.cancel()
        
        # Attendre que toutes les t√¢ches se terminent proprement
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
                
    except KeyboardInterrupt:
        logger.info("üëã Arr√™t en cours...")
        shutdown_flag = True
        for task in tasks:
            task.cancel()
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

if __name__ == "__main__":
    try:
        # Gestion propre des signaux sur Windows
        if sys.platform == "win32":
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        asyncio.run(run_with_health_server())
    except KeyboardInterrupt:
        print("\nüëã Au revoir !")
    except Exception as e:
        print(f"üí• Erreur lors du d√©marrage: {e}")
        raise